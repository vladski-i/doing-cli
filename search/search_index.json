{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview doing is a CLI tool for Azure DevOps that helps mimic the common repository/issue workflow from Github and Gitlab. In Azure DevOps an issue (work item) is not directly related to a repository (here's why ). doing solves this by adding a .doing-cli-config.yml file to the root of a repository containing information on the associated area and iteration paths. This enables doing to list, create and quickly access repository-related issues. Highlights quickly starting work on a new issue $ doing workon \"fixing a small typo\" > Created work item #146545 'fixing a small typo' (User Story) > added area-path '{your area path}' > added iteration-path '{your iteration path}' > added assignee '{your azure account}' > Created remote branch '146545_fixing_a_small_typo' > Created pull request #49281 'fixing a small typo' > linked work item #146545 > marked as draft pull request > set auto-complete to 'True' > set to delete remote source branch after PR completion > added reviewers: '{your azure account}' $ Running command: git fetch origin $ Running command: git checkout -b 146545_fixing_a_small_typo origin/146545_fixing_a_small_typo listing issues linked to a repository $ doing list Work-items in current iteration project_name\\team_name \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 ID \u2503 Title \u2503 Assignee \u2503 Type \u2503 Created \u2503 PRs \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 36893 \u2502 explore data \u2502 John \u2502 User Story \u2502 2 months ago \u2502 \u2502 \u2502 43769 \u2502 feature pipeline \u2502 Artur \u2502 User Story \u2502 5 days ago \u2502 \u2502 \u2502 99035 \u2502 window bug \u2502 Artur \u2502 Task \u2502 3 hours ago \u2502 39949 \u2502 \u2502 104436 \u2502 data loading functions \u2502 Jane \u2502 Task \u2502 just now \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Documentation Getting started : A hands-on introduction to doing for developers. Recommended for all new users How-to guides : Step-by-step guides. Covers key tasks and operations and common problems. Commands : Technical reference covering the all commands. Config : Technical reference covering configuration using a config file or environment variables. Discussion : Explanation. Clarification and discussion of key topics. --help Note that all commands are also documented in the CLI app: $ doing --help Usage: doing [OPTIONS] COMMAND [ARGS]... CLI for repository/issue workflow on Azure Devops. Options: --version Show the version and exit. --help Show this message and exit. Commands: init Create a .doing-cli-config file. list List issues related to the project. issue Work with issues. pr Work with pull requests. workon Create issue with PR and switch git branch. open Quickly open certain links.","title":"Overview"},{"location":"#overview","text":"doing is a CLI tool for Azure DevOps that helps mimic the common repository/issue workflow from Github and Gitlab. In Azure DevOps an issue (work item) is not directly related to a repository (here's why ). doing solves this by adding a .doing-cli-config.yml file to the root of a repository containing information on the associated area and iteration paths. This enables doing to list, create and quickly access repository-related issues.","title":"Overview"},{"location":"#highlights","text":"quickly starting work on a new issue $ doing workon \"fixing a small typo\" > Created work item #146545 'fixing a small typo' (User Story) > added area-path '{your area path}' > added iteration-path '{your iteration path}' > added assignee '{your azure account}' > Created remote branch '146545_fixing_a_small_typo' > Created pull request #49281 'fixing a small typo' > linked work item #146545 > marked as draft pull request > set auto-complete to 'True' > set to delete remote source branch after PR completion > added reviewers: '{your azure account}' $ Running command: git fetch origin $ Running command: git checkout -b 146545_fixing_a_small_typo origin/146545_fixing_a_small_typo listing issues linked to a repository $ doing list Work-items in current iteration project_name\\team_name \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 ID \u2503 Title \u2503 Assignee \u2503 Type \u2503 Created \u2503 PRs \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 36893 \u2502 explore data \u2502 John \u2502 User Story \u2502 2 months ago \u2502 \u2502 \u2502 43769 \u2502 feature pipeline \u2502 Artur \u2502 User Story \u2502 5 days ago \u2502 \u2502 \u2502 99035 \u2502 window bug \u2502 Artur \u2502 Task \u2502 3 hours ago \u2502 39949 \u2502 \u2502 104436 \u2502 data loading functions \u2502 Jane \u2502 Task \u2502 just now \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Highlights"},{"location":"#documentation","text":"Getting started : A hands-on introduction to doing for developers. Recommended for all new users How-to guides : Step-by-step guides. Covers key tasks and operations and common problems. Commands : Technical reference covering the all commands. Config : Technical reference covering configuration using a config file or environment variables. Discussion : Explanation. Clarification and discussion of key topics.","title":"Documentation"},{"location":"#-help","text":"Note that all commands are also documented in the CLI app: $ doing --help Usage: doing [OPTIONS] COMMAND [ARGS]... CLI for repository/issue workflow on Azure Devops. Options: --version Show the version and exit. --help Show this message and exit. Commands: init Create a .doing-cli-config file. list List issues related to the project. issue Work with issues. pr Work with pull requests. workon Create issue with PR and switch git branch. open Quickly open certain links.","title":"--help"},{"location":"contributing/","text":"Contributing The doing tool is an acronym for d ev o ps-ing. The tool was built to help speed up development a data science teams using Azure Devops but more accustomed to a github/gitlab style workflow. The tool uses modern python packages like Click and rich and is built on top of the azure devops CLI . Documentation We use mkdocs with mkdocs-material theme. The docs are structured using the Di\u00e1taxis documentation framework . To view the docs locally: pip install mkdocs-material mkdocs serve Setup We use pre-commit . Setup using pip install pre-commit and then pre-commit install . For development, use an editable install: pip install -e . For publishing, Update the version on src/doing/__init__.py & commit Tag and push a release using: git tag -a v0.1 -m \"doing-cli v0.1\" && git push origin v0.1 Draft a new release at https://github.com/ing-bank/doing-cli/releases The publish pypi github action will trigger when the release is published. Technical background We are basically wrapping the Azure Devops CLI. Azure Devops commands reference Tips for using azure devops cli effectively Examples of using azure devops CLI Here for reference. To view all shell commands being executed during a doing command, set verbose_shell to True in the .doing-cli-config.yml file (see config reference ), or use environment variables: export DOING_CONFIG_VERBOSE_SHELL=true . # Settings organization ={ your organization url } project ={ your project } team ={ your team } iteration ={ your iteration path } area ={ your area path } repo_name ={ name of your repo in azure devops } # Configuration az devops configure -l az devops configure --defaults organization = $organization project = $project # List areas for a team az boards area team list --team = $team # list work items az boards work-item show --id 37222 az boards query --wiql \"SELECT * FROM WorkItems WHERE ([System.State] = 'Active' OR [System.State] = 'New') AND [System.IterationPath] = ' $iteration ' AND [System.AreaPath] = ' $area '\" # list relation types az boards work-item relation list-type --query 'name' # Update a work item az boards work-item relation add --id 112011 --relation-type 'Branch' --target-id 6566809 # Artifact Link az boards work-item relation add --id 112011 --relation-type 'Artifact Link' --target-id 6566809 # from ojbectID of a branch with az repos ref list --repository $repo_name az boards work-item relation add --id 112011 --target-id \"<hash>\" --relation-type \"Artifact Link\" # List iterations #https://docs.microsoft.com/en-us/cli/azure/ext/azure-devops/boards?view=azure-cli-latest#ext_azure_devops_az_boards_query #https://docs.microsoft.com/en-us/azure/devops/boards/queries/wiql-syntax?view=azure-devops az boards iteration team show-backlog-iteration --team $team az boards iteration project list --path '$organization/$project/$repo_name/sprintname' az boards iteration project show --id '<hash>' az boards iteration team list --team $team # List remote branches az repos ref list --repository $repo_name --query '[].name' # Creating work items az boards work-item create --title \"Test from command line\" --type \"User Story\" --area $area az boards work-item create --title \"testing\" --type \"User Story\" --area $area --iteration $iteration --assigned-to \"<your email>\" # Deleting work items az boards work-item delete --id 112011 # Creating a branch # 1) get object id of master branch: az repos ref list --repository $repo_name --query \"[?name=='refs/heads/master'].objectId\" # 2) get branch az repos ref create --name \"heads/<branch name>\" --repository $repo_name --object-id \"<hash>\" # Creating a PR az repos pr create --repository $repo_name --work-items '112011' --draft --title \"test pr\" --source-branch \"<branch name>\" --transition-work-items 'true' # Get a repository id, as well as default branch az repos show --repository '<repo_name>' # List policies active on a repo branch az repos policy list --repository \"<id_hash>\" --branch 'master' -o jsonc az repos policy merge-strategy create --repository \"<id_hash>\" --branch 'refs/heads/master' --blocking false --enabled true --allow-no-fast-forward true --allow-rebase true --allow-rebase-merge true --allow-squash true","title":"Contributing"},{"location":"contributing/#contributing","text":"The doing tool is an acronym for d ev o ps-ing. The tool was built to help speed up development a data science teams using Azure Devops but more accustomed to a github/gitlab style workflow. The tool uses modern python packages like Click and rich and is built on top of the azure devops CLI .","title":"Contributing"},{"location":"contributing/#documentation","text":"We use mkdocs with mkdocs-material theme. The docs are structured using the Di\u00e1taxis documentation framework . To view the docs locally: pip install mkdocs-material mkdocs serve","title":"Documentation"},{"location":"contributing/#setup","text":"We use pre-commit . Setup using pip install pre-commit and then pre-commit install . For development, use an editable install: pip install -e . For publishing, Update the version on src/doing/__init__.py & commit Tag and push a release using: git tag -a v0.1 -m \"doing-cli v0.1\" && git push origin v0.1 Draft a new release at https://github.com/ing-bank/doing-cli/releases The publish pypi github action will trigger when the release is published.","title":"Setup"},{"location":"contributing/#technical-background","text":"We are basically wrapping the Azure Devops CLI. Azure Devops commands reference Tips for using azure devops cli effectively","title":"Technical background"},{"location":"contributing/#examples-of-using-azure-devops-cli","text":"Here for reference. To view all shell commands being executed during a doing command, set verbose_shell to True in the .doing-cli-config.yml file (see config reference ), or use environment variables: export DOING_CONFIG_VERBOSE_SHELL=true . # Settings organization ={ your organization url } project ={ your project } team ={ your team } iteration ={ your iteration path } area ={ your area path } repo_name ={ name of your repo in azure devops } # Configuration az devops configure -l az devops configure --defaults organization = $organization project = $project # List areas for a team az boards area team list --team = $team # list work items az boards work-item show --id 37222 az boards query --wiql \"SELECT * FROM WorkItems WHERE ([System.State] = 'Active' OR [System.State] = 'New') AND [System.IterationPath] = ' $iteration ' AND [System.AreaPath] = ' $area '\" # list relation types az boards work-item relation list-type --query 'name' # Update a work item az boards work-item relation add --id 112011 --relation-type 'Branch' --target-id 6566809 # Artifact Link az boards work-item relation add --id 112011 --relation-type 'Artifact Link' --target-id 6566809 # from ojbectID of a branch with az repos ref list --repository $repo_name az boards work-item relation add --id 112011 --target-id \"<hash>\" --relation-type \"Artifact Link\" # List iterations #https://docs.microsoft.com/en-us/cli/azure/ext/azure-devops/boards?view=azure-cli-latest#ext_azure_devops_az_boards_query #https://docs.microsoft.com/en-us/azure/devops/boards/queries/wiql-syntax?view=azure-devops az boards iteration team show-backlog-iteration --team $team az boards iteration project list --path '$organization/$project/$repo_name/sprintname' az boards iteration project show --id '<hash>' az boards iteration team list --team $team # List remote branches az repos ref list --repository $repo_name --query '[].name' # Creating work items az boards work-item create --title \"Test from command line\" --type \"User Story\" --area $area az boards work-item create --title \"testing\" --type \"User Story\" --area $area --iteration $iteration --assigned-to \"<your email>\" # Deleting work items az boards work-item delete --id 112011 # Creating a branch # 1) get object id of master branch: az repos ref list --repository $repo_name --query \"[?name=='refs/heads/master'].objectId\" # 2) get branch az repos ref create --name \"heads/<branch name>\" --repository $repo_name --object-id \"<hash>\" # Creating a PR az repos pr create --repository $repo_name --work-items '112011' --draft --title \"test pr\" --source-branch \"<branch name>\" --transition-work-items 'true' # Get a repository id, as well as default branch az repos show --repository '<repo_name>' # List policies active on a repo branch az repos policy list --repository \"<id_hash>\" --branch 'master' -o jsonc az repos policy merge-strategy create --repository \"<id_hash>\" --branch 'refs/heads/master' --blocking false --enabled true --allow-no-fast-forward true --allow-rebase true --allow-rebase-merge true --allow-squash true","title":"Examples of using azure devops CLI"},{"location":"assets/abbreviations/","text":"","title":"Abbreviations"},{"location":"config/config_file/","text":"The .doing-cli-config.yml config file When running a command doing searches for YAML config file named .doing-cli-config.yml . This file is required and used to link issues to a repository (see discussion ). Required parameters The config must contain the following parameters (in lowercase): Parameter Description organization Azure DevOps organization URL. You can quickly find the organization in your devops url, right after https://dev.azure.com . Example: https://dev.azure.com/organization_name . project Name of the project. You can quickly find the organization in a devops url, right after the organization url. Example: The project for https://dev.azure.com/your_organization/your_project/... is your_project . team The name of your team. You can quickly find it when navigating on Azure Devops to Boards > Boards. Example: The team in https://dev.azure.com/organization_name/project_name/_boards/board/t/my_team/Stories is my_team . area The area path assigned to work items. You can find it by going to a work item (Azure Devops > Boards > Work items) and copying the Area field. This corresponds to the work item field System.AreaPath . More about area and iteration paths . iteration The iteration path assigned to work items. You can find it going by to a work item (Azure Devops > Boards > Work items) and copying the Iteration field. This corresponds to the work item field System.IterationPath . More about area and iteration paths . Example .doing-cli-config.yml : # .doing-cli-config.yml organization : 'https://dev.azure.com/organization_name' project : 'project_name' team : 'team-name' area : 'organization_name\\repo_name\\area_name' iteration : 'organization_name\\team_name\\iteration_name' Optional parameters The config can also contain some optional parameters that are not required to be set. Here's a summary: Optional Parameter Description verbose_shell Set to 'true' to print every shell command doing runs for you in the background. Meant for debugging and interested developers. Default is 'false'. user_aliases A list of user aliases that you can use when specifying reviewers or assignees. Note that the @me alias is always available. default_reviewers The default reviewers assigned when creating pull requests. Space separated list of user emails (case sensitive). Find your own with az ad signed-in-user show --query 'mail' . custom_states A dictionary of work item states or lists of states to use when filtering work items with doing list --state \"state\" . defaults Allows you to overwrite defaults of command options. See explanation below. merge_strategy Azure devops supports pull requests with rebase (see blogpost ). Should be one of \"basic merge\", \"squash merge\", \"rebase and fast-forward\", \"rebase with merge commit\". If specified, it will update the policies on a repository level to only allow that merge strategy. encoding The encoding used to parse the response of terminal commands. This is auto-detected by default but can be set explicitly in case you have encoding trouble. Example .doing-cli-config.yml with all optional parameters set: # .doing-cli-config.yml # ... other required parameters ... verbose_shell : true encoding : 'UTF-8' user_aliases : john : 'John.Doe@company.com' jane : 'Jane.Doe@email.net' default_reviewers : 'john.doe@domain.com' custom_states : removed : Removed resolved : [ Resolved , Closed ] defaults : DOING_LIST_STATE : all merge_strategy : \"rebase and fast-forward\" Setting verbose_shell Set to 'true' to print every shell command doing runs for you in the background. Meant for debugging and interested developers. Default is 'false'. # .doing-cli-config.yml verbose_shell : true Setting encoding The encoding used to parse the response of terminal commands. This is auto-detected by default but can be set explicitly in case you have encoding trouble. # .doing-cli-config.yml encoding : 'UTF-8' Setting user_aliases Anywhere you can specify assignee or reviewer , you can fill in user email adress. These are case-sensitive, and lenghty, so you can also choose to define a set of user aliases: # .doing-cli-config.yml user_aliases : john : 'John.Doe@company.com' jane : 'Jane.Doe@email.net' Now you can use aliases like: doing issue create --assignee \"john\" Setting default_reviewers You might have a project where all pull requests have the same set of reviewers. Instead of using the lengthy doing pr create --reviewers 'email1@domain.com email2@domain.com' , you can set a default set of reviewers in the .doing-cli-config.yml (see config ) by specifying default_reviewers . For example: # .doing-cli-config.yml default_reviewers : 'email1@domain.com email2@domain.com' You can also use the aliases specified in user_aliases to specify the default_reviewers . Setting custom_states When listing work items you can filter them by state with doing list --state \"state\" . doing-cli includes some default options for this filter: open : state not in ['Resolved','Closed','Done','Removed'] closed : state in ['Resolved','Closed','Done'] all : state different than 'Removed' You can overwrite these or specify your own custom state filters. For example: # .doing-cli-config.yml custom_states : removed : Removed resolved : [ Resolved , Closed ] Which can be used as: doing list --state \"removed\" Setting defaults For every doing command, you can use --help to see any default for an option (if applicable), as well as the name (in capital letters) of that option, listed after 'env var'. For example, doing issue create --help has an option named DOING_ISSUE_CREATE_LABEL (in the help, listed as [env var: DOING_ISSUE_CREATE_LABEL] ). You can use those variable names to set different defaults for commands in your .doing-cli-config.yml file. Here's an example .doing-cli-config.yml : # .doing-cli-config.yml # ... other settings ... defaults : DOING_LIST_STATE : all DOING_WORKON_TYPE : Bug DOING_LIST_LABEL : \"some_tag another_tag something\" This is a great way to set defaults for your entire team. If you would like to set personal defaults you can choose to use environment variables instead. Priority of settings doing uses the following order of priority: Options set directly on the command list, f.e.: doing list --state all Options set as environment variable, f.e.: export DOING_LIST_STATE=all Options set in the .doing-cli-config.yml file, f.e.: setting DOING_LIST_STATE: all under defaults Setting merge_strategy Azure devops supports 4 different types of merge strategies ( blogpost ). You can set a policy to allow a specific set of 1 or more strategies for each repository you work on, using the Azure Devops admin panel or az repos policy merge-strategy . Often a team agrees on a single merge strategy for all PRs. doing makes it easy to set the merge-strategy for everyone in the .doing-cli-config.yml file. For example: # .doing-cli-config.yml # ... other settings ... merge_strategy : \"rebase and fast-forward\" These are the merge strategies allowed: Merge strategy Description basic merge Basic merge (no fast-forward) - Preserves nonlinear history exactly as it happened during development. squash merge Individual commits that made up the pull request are combined into a single commit onto the target without a merge commit. rebase and fast-forward Creates a linear history by replaying the source branch commits onto the target without a merge commit. rebase with merge commit Creates a semi-linear history by replaying the source branch commits onto the target and then creating a merge commit. If specified, everytime before a PR is created, doing will check and if needed update the policies on a repository level to only allow that merge strategy to the default branch (often master ). If not specified, doing will not check any merge policies and a PR will be created with whatever the default policies in your azure devops organization/project are. Often this is a \"basic merge\".","title":"Config file"},{"location":"config/config_file/#the-doing-cli-configyml-config-file","text":"When running a command doing searches for YAML config file named .doing-cli-config.yml . This file is required and used to link issues to a repository (see discussion ).","title":"The .doing-cli-config.yml config file"},{"location":"config/config_file/#required-parameters","text":"The config must contain the following parameters (in lowercase): Parameter Description organization Azure DevOps organization URL. You can quickly find the organization in your devops url, right after https://dev.azure.com . Example: https://dev.azure.com/organization_name . project Name of the project. You can quickly find the organization in a devops url, right after the organization url. Example: The project for https://dev.azure.com/your_organization/your_project/... is your_project . team The name of your team. You can quickly find it when navigating on Azure Devops to Boards > Boards. Example: The team in https://dev.azure.com/organization_name/project_name/_boards/board/t/my_team/Stories is my_team . area The area path assigned to work items. You can find it by going to a work item (Azure Devops > Boards > Work items) and copying the Area field. This corresponds to the work item field System.AreaPath . More about area and iteration paths . iteration The iteration path assigned to work items. You can find it going by to a work item (Azure Devops > Boards > Work items) and copying the Iteration field. This corresponds to the work item field System.IterationPath . More about area and iteration paths . Example .doing-cli-config.yml : # .doing-cli-config.yml organization : 'https://dev.azure.com/organization_name' project : 'project_name' team : 'team-name' area : 'organization_name\\repo_name\\area_name' iteration : 'organization_name\\team_name\\iteration_name'","title":"Required parameters"},{"location":"config/config_file/#optional-parameters","text":"The config can also contain some optional parameters that are not required to be set. Here's a summary: Optional Parameter Description verbose_shell Set to 'true' to print every shell command doing runs for you in the background. Meant for debugging and interested developers. Default is 'false'. user_aliases A list of user aliases that you can use when specifying reviewers or assignees. Note that the @me alias is always available. default_reviewers The default reviewers assigned when creating pull requests. Space separated list of user emails (case sensitive). Find your own with az ad signed-in-user show --query 'mail' . custom_states A dictionary of work item states or lists of states to use when filtering work items with doing list --state \"state\" . defaults Allows you to overwrite defaults of command options. See explanation below. merge_strategy Azure devops supports pull requests with rebase (see blogpost ). Should be one of \"basic merge\", \"squash merge\", \"rebase and fast-forward\", \"rebase with merge commit\". If specified, it will update the policies on a repository level to only allow that merge strategy. encoding The encoding used to parse the response of terminal commands. This is auto-detected by default but can be set explicitly in case you have encoding trouble. Example .doing-cli-config.yml with all optional parameters set: # .doing-cli-config.yml # ... other required parameters ... verbose_shell : true encoding : 'UTF-8' user_aliases : john : 'John.Doe@company.com' jane : 'Jane.Doe@email.net' default_reviewers : 'john.doe@domain.com' custom_states : removed : Removed resolved : [ Resolved , Closed ] defaults : DOING_LIST_STATE : all merge_strategy : \"rebase and fast-forward\"","title":"Optional parameters"},{"location":"config/config_file/#setting-verbose_shell","text":"Set to 'true' to print every shell command doing runs for you in the background. Meant for debugging and interested developers. Default is 'false'. # .doing-cli-config.yml verbose_shell : true","title":"Setting verbose_shell"},{"location":"config/config_file/#setting-encoding","text":"The encoding used to parse the response of terminal commands. This is auto-detected by default but can be set explicitly in case you have encoding trouble. # .doing-cli-config.yml encoding : 'UTF-8'","title":"Setting encoding"},{"location":"config/config_file/#setting-user_aliases","text":"Anywhere you can specify assignee or reviewer , you can fill in user email adress. These are case-sensitive, and lenghty, so you can also choose to define a set of user aliases: # .doing-cli-config.yml user_aliases : john : 'John.Doe@company.com' jane : 'Jane.Doe@email.net' Now you can use aliases like: doing issue create --assignee \"john\"","title":"Setting user_aliases"},{"location":"config/config_file/#setting-default_reviewers","text":"You might have a project where all pull requests have the same set of reviewers. Instead of using the lengthy doing pr create --reviewers 'email1@domain.com email2@domain.com' , you can set a default set of reviewers in the .doing-cli-config.yml (see config ) by specifying default_reviewers . For example: # .doing-cli-config.yml default_reviewers : 'email1@domain.com email2@domain.com' You can also use the aliases specified in user_aliases to specify the default_reviewers .","title":"Setting default_reviewers"},{"location":"config/config_file/#setting-custom_states","text":"When listing work items you can filter them by state with doing list --state \"state\" . doing-cli includes some default options for this filter: open : state not in ['Resolved','Closed','Done','Removed'] closed : state in ['Resolved','Closed','Done'] all : state different than 'Removed' You can overwrite these or specify your own custom state filters. For example: # .doing-cli-config.yml custom_states : removed : Removed resolved : [ Resolved , Closed ] Which can be used as: doing list --state \"removed\"","title":"Setting custom_states"},{"location":"config/config_file/#setting-defaults","text":"For every doing command, you can use --help to see any default for an option (if applicable), as well as the name (in capital letters) of that option, listed after 'env var'. For example, doing issue create --help has an option named DOING_ISSUE_CREATE_LABEL (in the help, listed as [env var: DOING_ISSUE_CREATE_LABEL] ). You can use those variable names to set different defaults for commands in your .doing-cli-config.yml file. Here's an example .doing-cli-config.yml : # .doing-cli-config.yml # ... other settings ... defaults : DOING_LIST_STATE : all DOING_WORKON_TYPE : Bug DOING_LIST_LABEL : \"some_tag another_tag something\" This is a great way to set defaults for your entire team. If you would like to set personal defaults you can choose to use environment variables instead. Priority of settings doing uses the following order of priority: Options set directly on the command list, f.e.: doing list --state all Options set as environment variable, f.e.: export DOING_LIST_STATE=all Options set in the .doing-cli-config.yml file, f.e.: setting DOING_LIST_STATE: all under defaults","title":"Setting defaults"},{"location":"config/config_file/#setting-merge_strategy","text":"Azure devops supports 4 different types of merge strategies ( blogpost ). You can set a policy to allow a specific set of 1 or more strategies for each repository you work on, using the Azure Devops admin panel or az repos policy merge-strategy . Often a team agrees on a single merge strategy for all PRs. doing makes it easy to set the merge-strategy for everyone in the .doing-cli-config.yml file. For example: # .doing-cli-config.yml # ... other settings ... merge_strategy : \"rebase and fast-forward\" These are the merge strategies allowed: Merge strategy Description basic merge Basic merge (no fast-forward) - Preserves nonlinear history exactly as it happened during development. squash merge Individual commits that made up the pull request are combined into a single commit onto the target without a merge commit. rebase and fast-forward Creates a linear history by replaying the source branch commits onto the target without a merge commit. rebase with merge commit Creates a semi-linear history by replaying the source branch commits onto the target and then creating a merge commit. If specified, everytime before a PR is created, doing will check and if needed update the policies on a repository level to only allow that merge strategy to the default branch (often master ). If not specified, doing will not check any merge policies and a PR will be created with whatever the default policies in your azure devops organization/project are. Often this is a \"basic merge\".","title":"Setting merge_strategy"},{"location":"config/env_config/","text":"Using environment variables doing supports the use of environment variables to overwrite and set options. Set an environment using export and avoid using set ) Overwriting commands default options You can overwrite any command option using the env var name specified when you type --help . For example, doing issue create --help has an option named DOING_ISSUE_CREATE_LABEL (in the help, listed as [env var: DOING_ISSUE_CREATE_LABEL] ). Some examples: doing issue create export DOING_ISSUE_CREATE_TYPE = \"Task\" doing issue create \"A task\" doing workon export DOING_WORKON_TYPE = \"Task\" doing workon \"A task\" doing list export DOING_CONFIG_ITERATION = 'your_project\\your_team\\sprint1' doing list doing issue create \"a new issue in the current sprint\" export DOING_CONFIG_ITERATION = 'your_project\\your_team\\sprint2' doing list doing issue create \"a new issue in the next sprint\" unset DOING_CONFIG_ITERATION Priority of settings doing uses the following order of priority: Options set directly on the command list, f.e.: doing list --state all Options set as environment variable, f.e.: export DOING_LIST_STATE=all Options set in the .doing-cli-config.yml file, f.e.: setting DOING_LIST_STATE: all under defaults Overwriting config file parameters You can overwrite the values set in doing-cli-config.yml using environment variables. Use the prefix DOING_CONFIG_ followed by the parameter name in uppercase. Any config set as environment variable will overwrite config parameters set in the config file. Some examples: Parameter Environment variable team DOING_CONFIG_TEAM iteration DOING_CONFIG_ITERATION # Example usage export DOING_CONFIG_VERBOSE_SHELL = True doing list","title":"Using env vars"},{"location":"config/env_config/#using-environment-variables","text":"doing supports the use of environment variables to overwrite and set options. Set an environment using export and avoid using set )","title":"Using environment variables"},{"location":"config/env_config/#overwriting-commands-default-options","text":"You can overwrite any command option using the env var name specified when you type --help . For example, doing issue create --help has an option named DOING_ISSUE_CREATE_LABEL (in the help, listed as [env var: DOING_ISSUE_CREATE_LABEL] ). Some examples: doing issue create export DOING_ISSUE_CREATE_TYPE = \"Task\" doing issue create \"A task\" doing workon export DOING_WORKON_TYPE = \"Task\" doing workon \"A task\" doing list export DOING_CONFIG_ITERATION = 'your_project\\your_team\\sprint1' doing list doing issue create \"a new issue in the current sprint\" export DOING_CONFIG_ITERATION = 'your_project\\your_team\\sprint2' doing list doing issue create \"a new issue in the next sprint\" unset DOING_CONFIG_ITERATION Priority of settings doing uses the following order of priority: Options set directly on the command list, f.e.: doing list --state all Options set as environment variable, f.e.: export DOING_LIST_STATE=all Options set in the .doing-cli-config.yml file, f.e.: setting DOING_LIST_STATE: all under defaults","title":"Overwriting commands default options"},{"location":"config/env_config/#overwriting-config-file-parameters","text":"You can overwrite the values set in doing-cli-config.yml using environment variables. Use the prefix DOING_CONFIG_ followed by the parameter name in uppercase. Any config set as environment variable will overwrite config parameters set in the config file. Some examples: Parameter Environment variable team DOING_CONFIG_TEAM iteration DOING_CONFIG_ITERATION # Example usage export DOING_CONFIG_VERBOSE_SHELL = True doing list","title":"Overwriting config file parameters"},{"location":"discussion/oneproject_setup/","text":"Azure Devops One Project Setup Azure Devops has a limit of 250 projects per azure organization. A lot of collaboration possibilities are not possible between azure organizations. As a consequence, larger companies cannot allow teams to have one or more projects. The solution is surprisingly simple: combine all teams into a single project from a single organization. In this 'One Project' setup, the link between a repository and an issue (work item) is not so clear, because a team can have multiple repositories but only a single board. Many developers however are used to the github or gitlab way of working, where a project has a single repository and a single associated board with issues. In the diagram below you can see that a work item always has an area-path and an iteration-path, which are unique to a certain team. A work item can be linked to a branch of an existing repository, which is often a branch made specifically to work on the issue. Of course this enables managing projects with multiple repositories and different teams working on different aspects, but often an actual project means you would like a single issue board to match a single repository. erDiagram TEAM }|--|| ITERATION-PATHS : has TEAM }|--|| AREA-PATHS : has WORK-ITEM ||--|{ AREA-PATHS : has WORK-ITEM ||--|{ ITERATION-PATHS : has REPOSITORY-BRANCH }|--|{ WORK-ITEM : links If you work on many repositories (for example as an individual contributor), figuring out which work items are related to it (like a github or gitlab issue board) is cumbersome at best. This is only exacerbated by common company policies set in Azure Devops that enforce every commit to be linked to a peer-reviewed pull request, and each pull request to have at least one linked work item. To restore the single repository and single issue board workflow, doing stores the area path and iteration path information in a config in the root of each repo, and uses that information to expose a small set of CLI commands that help mimic the familiar github/gitlab workflow.","title":"One Project Setup"},{"location":"discussion/oneproject_setup/#azure-devops-one-project-setup","text":"Azure Devops has a limit of 250 projects per azure organization. A lot of collaboration possibilities are not possible between azure organizations. As a consequence, larger companies cannot allow teams to have one or more projects. The solution is surprisingly simple: combine all teams into a single project from a single organization. In this 'One Project' setup, the link between a repository and an issue (work item) is not so clear, because a team can have multiple repositories but only a single board. Many developers however are used to the github or gitlab way of working, where a project has a single repository and a single associated board with issues. In the diagram below you can see that a work item always has an area-path and an iteration-path, which are unique to a certain team. A work item can be linked to a branch of an existing repository, which is often a branch made specifically to work on the issue. Of course this enables managing projects with multiple repositories and different teams working on different aspects, but often an actual project means you would like a single issue board to match a single repository. erDiagram TEAM }|--|| ITERATION-PATHS : has TEAM }|--|| AREA-PATHS : has WORK-ITEM ||--|{ AREA-PATHS : has WORK-ITEM ||--|{ ITERATION-PATHS : has REPOSITORY-BRANCH }|--|{ WORK-ITEM : links If you work on many repositories (for example as an individual contributor), figuring out which work items are related to it (like a github or gitlab issue board) is cumbersome at best. This is only exacerbated by common company policies set in Azure Devops that enforce every commit to be linked to a peer-reviewed pull request, and each pull request to have at least one linked work item. To restore the single repository and single issue board workflow, doing stores the area path and iteration path information in a config in the root of each repo, and uses that information to expose a small set of CLI commands that help mimic the familiar github/gitlab workflow.","title":"Azure Devops One Project Setup"},{"location":"discussion/upgrading/","text":"Upgrading Doing Releases All release details can be found on the doing releases page . v1.0 See release notes Upgrading from 0.x to 1.0 Update any reference to renamed commands: doing create pr is renamed to doing pr create doing close pr is renamed to doing pr close doing create issue is renamed to doing issue create doing close issue is renamed to doing issue close doing pr create now has changed defaults. The command now has similar output to doing workon which leads to a more natural workflow. If you prefer the old behaviour, set the defaults in the config file : --checkout is now default (was --no-checkout ) --delete-source-branch is now default (was --no-delete-source-branch ) --auto-complete is now default (was --no-auto-complete ) --draft is now default (was --no-draft ) Note the use of the @me alias: doing pr create will now always add @me to the --reviewers (a default user alias pointing to the logged in users's azure account). doing workon will now always add @me to the --reviewers (a default user alias pointing to the logged in users's azure account). doing issue create has been changed: -a/--assigned-to is renamed to -a/--assignee , and supports @me alias.","title":"Upgrading"},{"location":"discussion/upgrading/#upgrading","text":"Doing Releases All release details can be found on the doing releases page .","title":"Upgrading"},{"location":"discussion/upgrading/#v10","text":"See release notes","title":"v1.0"},{"location":"discussion/upgrading/#upgrading-from-0x-to-10","text":"Update any reference to renamed commands: doing create pr is renamed to doing pr create doing close pr is renamed to doing pr close doing create issue is renamed to doing issue create doing close issue is renamed to doing issue close doing pr create now has changed defaults. The command now has similar output to doing workon which leads to a more natural workflow. If you prefer the old behaviour, set the defaults in the config file : --checkout is now default (was --no-checkout ) --delete-source-branch is now default (was --no-delete-source-branch ) --auto-complete is now default (was --no-auto-complete ) --draft is now default (was --no-draft ) Note the use of the @me alias: doing pr create will now always add @me to the --reviewers (a default user alias pointing to the logged in users's azure account). doing workon will now always add @me to the --reviewers (a default user alias pointing to the logged in users's azure account). doing issue create has been changed: -a/--assigned-to is renamed to -a/--assignee , and supports @me alias.","title":"Upgrading from 0.x to 1.0"},{"location":"get_started/install/","text":"Installation Installing the tool You can install the tool with $ pip install doing-cli ---> 100% Successfully installed doing-cli You should then be able to view the help file by running doing : $ doing Usage: doing [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Commands: list List issues related to the project. nothing Take a break. open Quickly open certain links workon Work on a new work item. Installing Azure CLI To use doing we also need to install Azure's az CLI tool. Manually Install azure cli Install azure cli devops extension On Mac via command line If you're on mac, you can install both quickly via the command line: brew update && brew install azure-cli az extension add --name azure-devops You can confirm the installation by running az devops --help . If you see the help files, the installation was succesfull.","title":"Installation"},{"location":"get_started/install/#installation","text":"","title":"Installation"},{"location":"get_started/install/#installing-the-tool","text":"You can install the tool with $ pip install doing-cli ---> 100% Successfully installed doing-cli You should then be able to view the help file by running doing : $ doing Usage: doing [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Commands: list List issues related to the project. nothing Take a break. open Quickly open certain links workon Work on a new work item.","title":"Installing the tool"},{"location":"get_started/install/#installing-azure-cli","text":"To use doing we also need to install Azure's az CLI tool. Manually Install azure cli Install azure cli devops extension On Mac via command line If you're on mac, you can install both quickly via the command line: brew update && brew install azure-cli az extension add --name azure-devops You can confirm the installation by running az devops --help . If you see the help files, the installation was succesfull.","title":"Installing Azure CLI"},{"location":"get_started/setup_auth/","text":"Setup authentication doing needs authentication to Azure Devops in order to work. The easiest way to provide authorization is through using a personal access token ( PAT ). Creating a personal access token Open dev.azure.com in your browser and sign in with your account. Navigate to your organization's devops space. (for example dev.azure.com/organization_name/ ) In the top right menu, click on the user gear icon (:fontawesome-solid-user-cog:) and choose 'Personal Access Token' to create a token. See this guide for more detailed instructions. Don't worry about losing this token: you can create a new one easily and just login again with that one. You can now login to azure devops, pasting your PAT when prompted: $ az devops login Token: If you want to check if you are logged in and have a connection, run the commands az account show -o jsonc and az devops project list -o jsonc . You should see a JSON response. Not working? See Connection problems .","title":"Setup authentication"},{"location":"get_started/setup_auth/#setup-authentication","text":"doing needs authentication to Azure Devops in order to work. The easiest way to provide authorization is through using a personal access token ( PAT ).","title":"Setup authentication"},{"location":"get_started/setup_auth/#creating-a-personal-access-token","text":"Open dev.azure.com in your browser and sign in with your account. Navigate to your organization's devops space. (for example dev.azure.com/organization_name/ ) In the top right menu, click on the user gear icon (:fontawesome-solid-user-cog:) and choose 'Personal Access Token' to create a token. See this guide for more detailed instructions. Don't worry about losing this token: you can create a new one easily and just login again with that one. You can now login to azure devops, pasting your PAT when prompted: $ az devops login Token: If you want to check if you are logged in and have a connection, run the commands az account show -o jsonc and az devops project list -o jsonc . You should see a JSON response. Not working? See Connection problems .","title":"Creating a personal access token"},{"location":"get_started/setup_project/","text":"Setup your project Work items are not directly linked to a repository in azure devops. doing looks for a .doing-cli-config.yml file in the root of your repository, that should contain information on how work items are linked. Every work item always has a organization, a devops project, a team, an area path, and an iteration path. For more background on this see this discussion . The easiest way to setup that config file is by using a reference work item. Find the url and run doing init <url> in the root of your repository, which will create the config file with the required parameters for you. For example: $ doing init https://dev.azure.com/organization_name/project_name/_workitems/edit/73554 > Created new .doing-cli-config.yml file > Filled in required parameters using reference work item #73554 Alternatively, create a .doing-cli-config.yml file in the root of your repository (you can use doing init to do that quickly) and specify the parameters. The easiest way to find these parameters is by creating or opening a work item, and copying the parameters from there. For information on how to find and set these parameters see the reference .doing-cli-config.yml config file Verifying the setup In the root of your repository, you can check if your configuration works using: $ doing list Work-items in current iteration project_name\\team_name \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 ID \u2503 Title \u2503 Assignee \u2503 Type \u2503 Created \u2503 PRs \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 36893 \u2502 explore data \u2502 John \u2502 User Story \u2502 2 months ago \u2502 \u2502 \u2502 43769 \u2502 feature pipeline \u2502 Artur \u2502 User Story \u2502 5 days ago \u2502 \u2502 \u2502 99035 \u2502 window bug \u2502 Artur \u2502 Task \u2502 3 hours ago \u2502 39949 \u2502 \u2502 104436 \u2502 data loading functions \u2502 Jane \u2502 Task \u2502 just now \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Setup your project"},{"location":"get_started/setup_project/#setup-your-project","text":"Work items are not directly linked to a repository in azure devops. doing looks for a .doing-cli-config.yml file in the root of your repository, that should contain information on how work items are linked. Every work item always has a organization, a devops project, a team, an area path, and an iteration path. For more background on this see this discussion . The easiest way to setup that config file is by using a reference work item. Find the url and run doing init <url> in the root of your repository, which will create the config file with the required parameters for you. For example: $ doing init https://dev.azure.com/organization_name/project_name/_workitems/edit/73554 > Created new .doing-cli-config.yml file > Filled in required parameters using reference work item #73554 Alternatively, create a .doing-cli-config.yml file in the root of your repository (you can use doing init to do that quickly) and specify the parameters. The easiest way to find these parameters is by creating or opening a work item, and copying the parameters from there. For information on how to find and set these parameters see the reference .doing-cli-config.yml config file","title":"Setup your project"},{"location":"get_started/setup_project/#verifying-the-setup","text":"In the root of your repository, you can check if your configuration works using: $ doing list Work-items in current iteration project_name\\team_name \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 ID \u2503 Title \u2503 Assignee \u2503 Type \u2503 Created \u2503 PRs \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 36893 \u2502 explore data \u2502 John \u2502 User Story \u2502 2 months ago \u2502 \u2502 \u2502 43769 \u2502 feature pipeline \u2502 Artur \u2502 User Story \u2502 5 days ago \u2502 \u2502 \u2502 99035 \u2502 window bug \u2502 Artur \u2502 Task \u2502 3 hours ago \u2502 39949 \u2502 \u2502 104436 \u2502 data loading functions \u2502 Jane \u2502 Task \u2502 just now \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Verifying the setup"},{"location":"howto/command_completion/","text":"Adding shell completion When enabling autocompletion you can hit Tab to complete doing commands and see follow-up commands. Setup is easy: Bash For Bash, add this to ~/.bashrc : eval \" $( _DOING_COMPLETE = source_bash doing ) \" Zsh For Zsh, add this to ~/.zshrc : eval \" $( _DOING_COMPLETE = source_zsh doing ) \" Ensure that the following is present in your ~/.zshrc : autoload -U compinit compinit -i Zsh version 5.7 or later is recommended. Fish For Fish, add this to ~/.config/fish/completions/foo-bar.fish : eval ( env _DOING_COMPLETE = source_fish doing ) Once setup, typing doing and hitting Tab should give you a list of follow-up commands like shown below. Hitting Tab again will cycle through the options. $ doing close -- Close an issue or PR. create -- Create issues or pull requests. init -- Create a .doing-cli-config file. list -- List issues related to the project. open -- Quickly open certain links. workon -- Create issue with PR and switch git branch.","title":"Shell completion"},{"location":"howto/command_completion/#adding-shell-completion","text":"When enabling autocompletion you can hit Tab to complete doing commands and see follow-up commands. Setup is easy: Bash For Bash, add this to ~/.bashrc : eval \" $( _DOING_COMPLETE = source_bash doing ) \" Zsh For Zsh, add this to ~/.zshrc : eval \" $( _DOING_COMPLETE = source_zsh doing ) \" Ensure that the following is present in your ~/.zshrc : autoload -U compinit compinit -i Zsh version 5.7 or later is recommended. Fish For Fish, add this to ~/.config/fish/completions/foo-bar.fish : eval ( env _DOING_COMPLETE = source_fish doing ) Once setup, typing doing and hitting Tab should give you a list of follow-up commands like shown below. Hitting Tab again will cycle through the options. $ doing close -- Close an issue or PR. create -- Create issues or pull requests. init -- Create a .doing-cli-config file. list -- List issues related to the project. open -- Quickly open certain links. workon -- Create issue with PR and switch git branch.","title":"Adding shell completion"},{"location":"howto/connection_problems/","text":"How to fix connection problems Some basic things to try: In addition to logging in through az devops login , make sure you are logged in to the azure devops environment on the browser as well (you need to go through the 2 factor authentication befor the command line interface works). You can do this using az login . Upgrade azure cli with az upgrade ( azure cli ). Disconnect from any company VPNs and check if everything works. Try renewing your personal access token and logging in once again through az devops login . Working behind a corporate proxy / virtual private network (VPN) First check that you can access the internet from your shell. When connected to a VPN, your company may require you to do this behind a corporate proxy. For example, try cloning a public repository or updating a package using pip through the public PyPi repository. If you cannot, contact your company's IT. To use Azure DevOps, you might have to add the certificates of your company to the ones from certifi , which the Python requests package uses to connect to the internet. If this is the case, you will receive an error indicating that you might not have the right certificates to connect to Azure DevOps. To fix this you must install your company's certificates. Then, set the environment variable REQUESTS_CA_BUNDLE to a bundle of your company's and certifi 's certificate bundles with export REQUESTS_CA_BUNDLE=<bundle location> . If the certificates are correctly setup, both these commands should work: - az devops login - az ad signed-in-user show --query 'mail' To keep the certifi certificates up-to-date, add the following script to the end of your .zshrc : # Set CA bundle certificate for doing-cli to connect to AzDo CERTIFICATES_DIR = $HOME /Documents/certificates ## Check if there's a new version of the certifi bundle if ! cmp -s $CERTIFICATES_DIR /certifi.ca-bundle $( python -m certifi ) ; then echo \"certifi has new certificates. Updating the local certificate bundle.\" cat $( python -m certifi ) > $CERTIFICATES_DIR /certifi.ca-bundle cat $CERTIFICATES_DIR /<corporate.ca-bundle> $CERTIFICATES_DIR /certifi.ca-bundle > $CERTIFICATES_DIR /corporate-certifi.ca-bundle fi export REQUESTS_CA_BUNDLE = $CERTIFICATES_DIR /corporate-certifi.ca-bundle where: - CERTIFICATES_DIR is the directory where your company's certificate bundle is stored; - is your company's certificate bundle; See more information from Azure on working behind a proxy","title":"Connection problems"},{"location":"howto/connection_problems/#how-to-fix-connection-problems","text":"Some basic things to try: In addition to logging in through az devops login , make sure you are logged in to the azure devops environment on the browser as well (you need to go through the 2 factor authentication befor the command line interface works). You can do this using az login . Upgrade azure cli with az upgrade ( azure cli ). Disconnect from any company VPNs and check if everything works. Try renewing your personal access token and logging in once again through az devops login .","title":"How to fix connection problems"},{"location":"howto/connection_problems/#working-behind-a-corporate-proxy-virtual-private-network-vpn","text":"First check that you can access the internet from your shell. When connected to a VPN, your company may require you to do this behind a corporate proxy. For example, try cloning a public repository or updating a package using pip through the public PyPi repository. If you cannot, contact your company's IT. To use Azure DevOps, you might have to add the certificates of your company to the ones from certifi , which the Python requests package uses to connect to the internet. If this is the case, you will receive an error indicating that you might not have the right certificates to connect to Azure DevOps. To fix this you must install your company's certificates. Then, set the environment variable REQUESTS_CA_BUNDLE to a bundle of your company's and certifi 's certificate bundles with export REQUESTS_CA_BUNDLE=<bundle location> . If the certificates are correctly setup, both these commands should work: - az devops login - az ad signed-in-user show --query 'mail' To keep the certifi certificates up-to-date, add the following script to the end of your .zshrc : # Set CA bundle certificate for doing-cli to connect to AzDo CERTIFICATES_DIR = $HOME /Documents/certificates ## Check if there's a new version of the certifi bundle if ! cmp -s $CERTIFICATES_DIR /certifi.ca-bundle $( python -m certifi ) ; then echo \"certifi has new certificates. Updating the local certificate bundle.\" cat $( python -m certifi ) > $CERTIFICATES_DIR /certifi.ca-bundle cat $CERTIFICATES_DIR /<corporate.ca-bundle> $CERTIFICATES_DIR /certifi.ca-bundle > $CERTIFICATES_DIR /corporate-certifi.ca-bundle fi export REQUESTS_CA_BUNDLE = $CERTIFICATES_DIR /corporate-certifi.ca-bundle where: - CERTIFICATES_DIR is the directory where your company's certificate bundle is stored; - is your company's certificate bundle; See more information from Azure on working behind a proxy","title":"Working behind a corporate proxy / virtual private network (VPN)"},{"location":"howto/python_scripting/","text":"Writing python scripts You can use doing functionality directly from python as well. Here's an example of programmatically creating a bunch of issues: from doing.options import get_common_options from doing.issue.create_issue import cmd_create_issue issue_list = [ 'issue 1' , 'issue 2' , 'issue 3' ] for title in issue_list : cmd_create_issue ( title , ** get_common_options ())","title":"Python scripting"},{"location":"howto/python_scripting/#writing-python-scripts","text":"You can use doing functionality directly from python as well. Here's an example of programmatically creating a bunch of issues: from doing.options import get_common_options from doing.issue.create_issue import cmd_create_issue issue_list = [ 'issue 1' , 'issue 2' , 'issue 3' ] for title in issue_list : cmd_create_issue ( title , ** get_common_options ())","title":"Writing python scripts"},{"location":"howto/workflow_bulk_edit_items/","text":"Workflow bulk editing work items Sometimes you want to edit multiple work items in one go. You can use doing list to filter the work items that you want to edit and use --output_format='array' to return a bash array that you can loop over. Bulk update story points For example, you might want to update all work items that do not have story points assigned yet. You can do that with the az boards work-item update command. Here's an example using a bash script, although you could also use python scripting : for id in $( doing list --story_points 'unassigned' -o 'array' ) do az boards work-item update --id \" $id \" --fields \"Microsoft.VSTS.Scheduling.StoryPoints=1\" echo \" $id updated with 1 story points\" done","title":"Workflow bulk edit issues"},{"location":"howto/workflow_bulk_edit_items/#workflow-bulk-editing-work-items","text":"Sometimes you want to edit multiple work items in one go. You can use doing list to filter the work items that you want to edit and use --output_format='array' to return a bash array that you can loop over.","title":"Workflow bulk editing work items"},{"location":"howto/workflow_bulk_edit_items/#bulk-update-story-points","text":"For example, you might want to update all work items that do not have story points assigned yet. You can do that with the az boards work-item update command. Here's an example using a bash script, although you could also use python scripting : for id in $( doing list --story_points 'unassigned' -o 'array' ) do az boards work-item update --id \" $id \" --fields \"Microsoft.VSTS.Scheduling.StoryPoints=1\" echo \" $id updated with 1 story points\" done","title":"Bulk update story points"},{"location":"howto/workflow_existing_item/","text":"Workflow existing work item You'll likely want to review existing issues first. cd into your repository and use doing list for a quick view. If you need more detail you can use doing open to open relevant views in the azure devops web portal, for example doing open issues , doing open board or doing open sprint . Start on an existing issue Once you have the issue ID you want to work on, you'll need to create a remote branch and a pull request to be able to start work. You can do that with the doing pr create command. doing follows the branch naming convention <work_item_id>_<issue title> , where the issue title is transformed to snake_case . You can safely run this command multiple times: if the branch already exists, it will use that one, and if the PR already exists for that branch, doing will let you know. $ doing pr create 146545 > Created remote branch '146545_fixing_a_small_typo' > Created pull request #49281 'fixing a small typo' > linked work item #146545 > set auto-complete to True' > set to delete remote source branch after PR completion > added reviewers: '<your email>' $ Running command: git fetch origin ... # Running command: git checkout -b '146545_fixing_a_small_typo' 'origin/146545_fixing_a_small_typo' You can also create a draft PR, assign reviewers, run the git checkout commands and more. See doing pr create --help for the options. Some examples: doing pr create 146545 --reviewers \"john.doe@email.com\" doing pr create 146545 --checkout --draft Start on existing pull request doing list will also show you if a work item already has a pull request associated with it. Alternatively doing pr list will show you a list of active pull requests. Once you have a pullrequest ID that you want to get started on, you can use doing pr checkout to quickly git checkout the branch locally. This is more convenient than manually finding the correct branchname and checkout it out locally (the 'long worflow'): Short workflow doing pr checkout <pullrequest_id> Long workflow doing open pr <pullrequest_id> # find branch name git fetch origin git checkout -b '{branch_name}' 'origin/{branch_name}' Using aliases To avoid having to type the emailadresses of your teammates every time (which are case sensitive in Azure), you can setup aliases in your .doing-cli-config.yml (see also config file reference): using aliases doing pr create 146545 --reviewers \"john jane\" .doing-cli-config.yml # ... other config items ... user_aliases : john : John.Doe@company.com jane : Jane.Doe@email.net Wrap up When you're done you can view the: pull request using doing open pr <pullrequest id> . Use doing list to find your PR id. issue using doing open issue <issue id> . The git branch name has the issue id as a prefix, or alternatively you can use doing list to find the issue id. active pull requests using doing open prs pipeline runs using doing open pipe","title":"Workflow existing issues"},{"location":"howto/workflow_existing_item/#workflow-existing-work-item","text":"You'll likely want to review existing issues first. cd into your repository and use doing list for a quick view. If you need more detail you can use doing open to open relevant views in the azure devops web portal, for example doing open issues , doing open board or doing open sprint .","title":"Workflow existing work item"},{"location":"howto/workflow_existing_item/#start-on-an-existing-issue","text":"Once you have the issue ID you want to work on, you'll need to create a remote branch and a pull request to be able to start work. You can do that with the doing pr create command. doing follows the branch naming convention <work_item_id>_<issue title> , where the issue title is transformed to snake_case . You can safely run this command multiple times: if the branch already exists, it will use that one, and if the PR already exists for that branch, doing will let you know. $ doing pr create 146545 > Created remote branch '146545_fixing_a_small_typo' > Created pull request #49281 'fixing a small typo' > linked work item #146545 > set auto-complete to True' > set to delete remote source branch after PR completion > added reviewers: '<your email>' $ Running command: git fetch origin ... # Running command: git checkout -b '146545_fixing_a_small_typo' 'origin/146545_fixing_a_small_typo' You can also create a draft PR, assign reviewers, run the git checkout commands and more. See doing pr create --help for the options. Some examples: doing pr create 146545 --reviewers \"john.doe@email.com\" doing pr create 146545 --checkout --draft","title":"Start on an existing issue"},{"location":"howto/workflow_existing_item/#start-on-existing-pull-request","text":"doing list will also show you if a work item already has a pull request associated with it. Alternatively doing pr list will show you a list of active pull requests. Once you have a pullrequest ID that you want to get started on, you can use doing pr checkout to quickly git checkout the branch locally. This is more convenient than manually finding the correct branchname and checkout it out locally (the 'long worflow'): Short workflow doing pr checkout <pullrequest_id> Long workflow doing open pr <pullrequest_id> # find branch name git fetch origin git checkout -b '{branch_name}' 'origin/{branch_name}'","title":"Start on existing pull request"},{"location":"howto/workflow_existing_item/#using-aliases","text":"To avoid having to type the emailadresses of your teammates every time (which are case sensitive in Azure), you can setup aliases in your .doing-cli-config.yml (see also config file reference): using aliases doing pr create 146545 --reviewers \"john jane\" .doing-cli-config.yml # ... other config items ... user_aliases : john : John.Doe@company.com jane : Jane.Doe@email.net","title":"Using aliases"},{"location":"howto/workflow_existing_item/#wrap-up","text":"When you're done you can view the: pull request using doing open pr <pullrequest id> . Use doing list to find your PR id. issue using doing open issue <issue id> . The git branch name has the issue id as a prefix, or alternatively you can use doing list to find the issue id. active pull requests using doing open prs pipeline runs using doing open pipe","title":"Wrap up"},{"location":"howto/workflow_new_item/","text":"Workflow for new issues Before creating a new issue, you'll likely want to review existing issues first. cd into your repository and use doing list for a quick view. If you need more detail you can use doing open to open relevant views in the azure devops web portal, for example doing open issues , doing open board or doing open sprint . Planning multiple items If you don't plan to start work on an issue immediately, you can use doing issue create to create a new (unassigned) work item with: doing issue create \"something that needs to be done\" You can specify more options (see doing issue create --help ). Some examples: doing issue create \"something that needs to be done\" --mine doing issue create \"something that needs to be done\" --assigned_to \"john.doe@company.com\" doing issue create \"something that needs to be done\" --a \"john.doe@company.com\" --type \"Bug\" doing issue create \"something that needs to be done\" --parent \"1234\" --type \"Task\" Starting work on a new issue If you plan to start work on a new issue immediately, it is better to use doing workon instead. All you need to provide is the title: $ doing workon \"fixing a small typo\" > Created issue #146545 'fixing a small typo' (User Story) > added area-path '{your area path}' > added iteration-path '{your iteration path}' > added assignee '{your azure account}' > Created remote branch '146545_fixing_a_small_typo' > Created pull request #49281 'fixing a small typo' > linked work item #146545 > marked as draft pull request > set auto-complete to True' > set to delete remote source branch after PR completion > added reviewers: '{your azure account}' $ Running command: git fetch origin $ Running command: git checkout -b 146545_fixing_a_small_typo origin/146545_fixing_a_small_typo This automates a lot of clicking in the Azure Devops web portal and even runs git commands locally, so you can immediately start your normal git add , git commit and git push development workflow. See also the workflow for starting work on an existing item Using aliases To avoid having to type the emailadresses of your teammates every time (which are case sensitive in Azure), you can setup aliases in your .doing-cli-config.yml (see also config file reference): using aliases doing issue create \"fix bug\" -a john # or doing workon \"fix bug\" --reviewers \"john jane\" .doing-cli-config.yml # ... other config items ... user_aliases : john : John.Doe@company.com jane : Jane.Doe@email.net Starting work on a new child issue Another common workflow is to work on tasks that are part of a user story. In azure devops, work items can be linked (parent/child relationship). doing workon has --parent and --type to accomodate the use case: doing workon \"some work\" --type 'Task' --parent 1234 Setting default work item types By default the work item is created with --type 'User Story'. There a lot of different work item types , the most common being \"Bug\", \"Epic\", \"Feature\", \"Issue\", \"Task\", \"Test Case\" and \"User Story\". Setting a different default can by done via the config file . It makes sense to do this immediately for doing workon as well. .doing-cli-config.yml defaults : DOING_CREATE_ISSUE_TYPE : 'Bug' DOING_WORKON_TYPE : 'Bug' Wrap up When you're done you can view the: pull request using doing open pr <pullrequest id> . Use doing list to find your PR id. issue using doing open issue <issue id> . The git branch name has the issue id as a prefix, or alternatively you can use doing list to find the issue id. active pull requests using doing open prs pipeline runs using doing open pipe","title":"Workflow new issues"},{"location":"howto/workflow_new_item/#workflow-for-new-issues","text":"Before creating a new issue, you'll likely want to review existing issues first. cd into your repository and use doing list for a quick view. If you need more detail you can use doing open to open relevant views in the azure devops web portal, for example doing open issues , doing open board or doing open sprint .","title":"Workflow for new issues"},{"location":"howto/workflow_new_item/#planning-multiple-items","text":"If you don't plan to start work on an issue immediately, you can use doing issue create to create a new (unassigned) work item with: doing issue create \"something that needs to be done\" You can specify more options (see doing issue create --help ). Some examples: doing issue create \"something that needs to be done\" --mine doing issue create \"something that needs to be done\" --assigned_to \"john.doe@company.com\" doing issue create \"something that needs to be done\" --a \"john.doe@company.com\" --type \"Bug\" doing issue create \"something that needs to be done\" --parent \"1234\" --type \"Task\"","title":"Planning multiple items"},{"location":"howto/workflow_new_item/#starting-work-on-a-new-issue","text":"If you plan to start work on a new issue immediately, it is better to use doing workon instead. All you need to provide is the title: $ doing workon \"fixing a small typo\" > Created issue #146545 'fixing a small typo' (User Story) > added area-path '{your area path}' > added iteration-path '{your iteration path}' > added assignee '{your azure account}' > Created remote branch '146545_fixing_a_small_typo' > Created pull request #49281 'fixing a small typo' > linked work item #146545 > marked as draft pull request > set auto-complete to True' > set to delete remote source branch after PR completion > added reviewers: '{your azure account}' $ Running command: git fetch origin $ Running command: git checkout -b 146545_fixing_a_small_typo origin/146545_fixing_a_small_typo This automates a lot of clicking in the Azure Devops web portal and even runs git commands locally, so you can immediately start your normal git add , git commit and git push development workflow. See also the workflow for starting work on an existing item","title":"Starting work on a new issue"},{"location":"howto/workflow_new_item/#using-aliases","text":"To avoid having to type the emailadresses of your teammates every time (which are case sensitive in Azure), you can setup aliases in your .doing-cli-config.yml (see also config file reference): using aliases doing issue create \"fix bug\" -a john # or doing workon \"fix bug\" --reviewers \"john jane\" .doing-cli-config.yml # ... other config items ... user_aliases : john : John.Doe@company.com jane : Jane.Doe@email.net","title":"Using aliases"},{"location":"howto/workflow_new_item/#starting-work-on-a-new-child-issue","text":"Another common workflow is to work on tasks that are part of a user story. In azure devops, work items can be linked (parent/child relationship). doing workon has --parent and --type to accomodate the use case: doing workon \"some work\" --type 'Task' --parent 1234","title":"Starting work on a new child issue"},{"location":"howto/workflow_new_item/#setting-default-work-item-types","text":"By default the work item is created with --type 'User Story'. There a lot of different work item types , the most common being \"Bug\", \"Epic\", \"Feature\", \"Issue\", \"Task\", \"Test Case\" and \"User Story\". Setting a different default can by done via the config file . It makes sense to do this immediately for doing workon as well. .doing-cli-config.yml defaults : DOING_CREATE_ISSUE_TYPE : 'Bug' DOING_WORKON_TYPE : 'Bug'","title":"Setting default work item types"},{"location":"howto/workflow_new_item/#wrap-up","text":"When you're done you can view the: pull request using doing open pr <pullrequest id> . Use doing list to find your PR id. issue using doing open issue <issue id> . The git branch name has the issue id as a prefix, or alternatively you can use doing list to find the issue id. active pull requests using doing open prs pipeline runs using doing open pipe","title":"Wrap up"},{"location":"howto/workflow_sprints/","text":"Workflow using sprints to manage issues In azure devops, all work items already have both an area path and an iteration path (a sprint). You can use these in different ways to group and structure your work items, even across multiple repositories (see this discussion for more background). Viewing your current sprint A sprint is basically an iteration path. You can view the issues using doing open sprint , doing open board or doing open issues . Note that doing list will show all active issues under the iteration path. This means that if you specify <projectname>/<teamname> as your iteration path, you might see issues with iteration path <projectname>/<teamname>/<sprint name> as well as issues with <projectname>/<teamname> . Changing sprints If you create a new sprint , you will have to update the .doing-cli-config.yml file as well. If you have a frequent sprint schedule, or don't want new issues to enter your sprint, you can specify a higher level iteration path instead (so <projectname>/<teamname> instead of <projectname>/<teamname>/<sprint name> ). doing list will still show all active items under the iteration path, and you can use the backlog management (open quickly via doing open sprint ) to manually manage the work items in your current sprint.","title":"Workflow sprints"},{"location":"howto/workflow_sprints/#workflow-using-sprints-to-manage-issues","text":"In azure devops, all work items already have both an area path and an iteration path (a sprint). You can use these in different ways to group and structure your work items, even across multiple repositories (see this discussion for more background).","title":"Workflow using sprints to manage issues"},{"location":"howto/workflow_sprints/#viewing-your-current-sprint","text":"A sprint is basically an iteration path. You can view the issues using doing open sprint , doing open board or doing open issues . Note that doing list will show all active issues under the iteration path. This means that if you specify <projectname>/<teamname> as your iteration path, you might see issues with iteration path <projectname>/<teamname>/<sprint name> as well as issues with <projectname>/<teamname> .","title":"Viewing your current sprint"},{"location":"howto/workflow_sprints/#changing-sprints","text":"If you create a new sprint , you will have to update the .doing-cli-config.yml file as well. If you have a frequent sprint schedule, or don't want new issues to enter your sprint, you can specify a higher level iteration path instead (so <projectname>/<teamname> instead of <projectname>/<teamname>/<sprint name> ). doing list will still show all active items under the iteration path, and you can use the backlog management (open quickly via doing open sprint ) to manually manage the work items in your current sprint.","title":"Changing sprints"},{"location":"reference/manual/init/","text":"doing init Create a .doing-cli-config file. doing init [ flags ] Example usage doing init doing init https://dev.azure.com/MyOrganization/MyProject/_workitems/edit/73554 doing init https://dev.azure.com/MyOrganization/MyProject/_boards/board/t/MyTeam/Stories/?workitem = 73554 Options Usage: doing init [OPTIONS] [REFERENCE_ISSUE] Create a .doing-cli-config file. REFERENCE_ISSUE (optional): Find a representative work item and pass its url to automatically fill the config. Options: --help Show this message and exit.","title":"init"},{"location":"reference/manual/init/#doing-init","text":"Create a .doing-cli-config file. doing init [ flags ]","title":"doing init"},{"location":"reference/manual/init/#example-usage","text":"doing init doing init https://dev.azure.com/MyOrganization/MyProject/_workitems/edit/73554 doing init https://dev.azure.com/MyOrganization/MyProject/_boards/board/t/MyTeam/Stories/?workitem = 73554","title":"Example usage"},{"location":"reference/manual/init/#options","text":"Usage: doing init [OPTIONS] [REFERENCE_ISSUE] Create a .doing-cli-config file. REFERENCE_ISSUE (optional): Find a representative work item and pass its url to automatically fill the config. Options: --help Show this message and exit.","title":"Options"},{"location":"reference/manual/issue_close/","text":"doing issue close Close a specific WORK_ITEM_ID. doing issue close [ flags ] Example usage doing issue close 12345 doing issue close 12345 6789 34141 1231 Options Usage: doing issue close [OPTIONS] WORK_ITEM_ID... Close a specific WORK_ITEM_ID. A '#' prefix is allowed. You can specify multiple IDs by separating with a space. Options: --help Show this message and exit.","title":"close"},{"location":"reference/manual/issue_close/#doing-issue-close","text":"Close a specific WORK_ITEM_ID. doing issue close [ flags ]","title":"doing issue close"},{"location":"reference/manual/issue_close/#example-usage","text":"doing issue close 12345 doing issue close 12345 6789 34141 1231","title":"Example usage"},{"location":"reference/manual/issue_close/#options","text":"Usage: doing issue close [OPTIONS] WORK_ITEM_ID... Close a specific WORK_ITEM_ID. A '#' prefix is allowed. You can specify multiple IDs by separating with a space. Options: --help Show this message and exit.","title":"Options"},{"location":"reference/manual/issue_create/","text":"doing issue create Create an issue. doing issue create [ flags ] Example usage doing issue create \"I found a bug\" doing issue create \"I found a bug\" -a \"john.doe@company.com\" doing issue create \"I found a bug\" -a @me doing issue create \"I found a bug\" -m doing issue create \"I found a bug\" --labels \"tag1, tag2\" doing issue create \"I found a bug\" --description \"More details on the bug\" doing issue create \"I found a bug\" --type \"Bug\" doing issue create \"This is a task\" --type \"Task\" --parent 12345 doing issue create \"This is a task\" --story_points 10 doing issue create \"This is a task\" --web Options Usage: doing issue create [OPTIONS] ISSUE Create an issue. ISSUE is the title to be used for the new work item. Options: -m, --mine / --not-mine Assign issue to yourself. Shorthand for '-a @me'. [env var: DOING_ISSUE_CREATE_MINE] -a, --assignee TEXT Emailadres or alias of person to assign. Defaults to empty (unassigned). Use '@me' to self-assign. [env var: DOING_ISSUE_CREATE_ASSIGNEE] -b, --body TEXT Optional description of the work item. [env var: DOING_ISSUE_CREATE_BODY] -t, --type TEXT Type of work item. Defaults to 'User Story'. [env var: DOING_ISSUE_CREATE_TYPE] -l, --label TEXT Attach tags (labels) to work item. Comma separate multiple tags. [env var: DOING_ISSUE_CREATE_LABEL] -p, --parent TEXT To create a child work item, specify the ID of the parent work item. [env var: DOING_ISSUE_CREATE_PARENT] -w, --web / --no-web Open newly created issue in the web browser. [env var: DOING_ISSUE_CREATE_WEB] -s, --story_points TEXT The number of story points to assign. Not assigned if not specified. [env var: DOING_ISSUE_CREATE_STORY_POINTS] --help Show this message and exit. In use Setting custom defaults in the config file: Bash doing issue create 'fixing a small typo' # > Created issue #146545 'fixing a small typo' (Task) # > added area-path '{your area path}' # > added iteration-path '{your iteration path}' # > added assignee 'john.doe@domain.com' # . > assigned 5 story points .doing-cli-config.yml # ... other (required) config items... default_reviewers : 'john.doe@domain.com' defaults : DOING_CREATE_ISSUE_TYPE : 'Task' DOING_WORKON_TYPE : 'Task' DOING_ISSUE_CREATE_STORY_POINTS : 5 DOING_WORKON_STORY_POINTS : 5 Overriding the existing config using environment variables: Bash export DOING_ISSUE_CREATE_ASSIGNED_TO = 'jane@company.com' doing issue create 'fixing a small typo' # > Created issue #146545 'fixing a small typo' (User Story) # > added area-path '{your area path}' # > added iteration-path '{your iteration path}' # > added assignee 'jane@company.com' .doing-cli-config.yml # ... other (required) config items... default_reviewers : 'john.doe@domain.com' Using user_aliases set in the config file : Shell doing issue create 'fixing a small typo' -a john # > Created issue #146545 'fixing a small typo' (User Story) # > added area-path '{your area path}' # > added iteration-path '{your iteration path}' # > added assignee 'john.doe@domain.com' .doing-cli-config.yml # ... other (required) config items... user_aliases : john : John.Doe@company.com jane : Jane.Doe@email.net","title":"create"},{"location":"reference/manual/issue_create/#doing-issue-create","text":"Create an issue. doing issue create [ flags ]","title":"doing issue create"},{"location":"reference/manual/issue_create/#example-usage","text":"doing issue create \"I found a bug\" doing issue create \"I found a bug\" -a \"john.doe@company.com\" doing issue create \"I found a bug\" -a @me doing issue create \"I found a bug\" -m doing issue create \"I found a bug\" --labels \"tag1, tag2\" doing issue create \"I found a bug\" --description \"More details on the bug\" doing issue create \"I found a bug\" --type \"Bug\" doing issue create \"This is a task\" --type \"Task\" --parent 12345 doing issue create \"This is a task\" --story_points 10 doing issue create \"This is a task\" --web","title":"Example usage"},{"location":"reference/manual/issue_create/#options","text":"Usage: doing issue create [OPTIONS] ISSUE Create an issue. ISSUE is the title to be used for the new work item. Options: -m, --mine / --not-mine Assign issue to yourself. Shorthand for '-a @me'. [env var: DOING_ISSUE_CREATE_MINE] -a, --assignee TEXT Emailadres or alias of person to assign. Defaults to empty (unassigned). Use '@me' to self-assign. [env var: DOING_ISSUE_CREATE_ASSIGNEE] -b, --body TEXT Optional description of the work item. [env var: DOING_ISSUE_CREATE_BODY] -t, --type TEXT Type of work item. Defaults to 'User Story'. [env var: DOING_ISSUE_CREATE_TYPE] -l, --label TEXT Attach tags (labels) to work item. Comma separate multiple tags. [env var: DOING_ISSUE_CREATE_LABEL] -p, --parent TEXT To create a child work item, specify the ID of the parent work item. [env var: DOING_ISSUE_CREATE_PARENT] -w, --web / --no-web Open newly created issue in the web browser. [env var: DOING_ISSUE_CREATE_WEB] -s, --story_points TEXT The number of story points to assign. Not assigned if not specified. [env var: DOING_ISSUE_CREATE_STORY_POINTS] --help Show this message and exit.","title":"Options"},{"location":"reference/manual/issue_create/#in-use","text":"Setting custom defaults in the config file: Bash doing issue create 'fixing a small typo' # > Created issue #146545 'fixing a small typo' (Task) # > added area-path '{your area path}' # > added iteration-path '{your iteration path}' # > added assignee 'john.doe@domain.com' # . > assigned 5 story points .doing-cli-config.yml # ... other (required) config items... default_reviewers : 'john.doe@domain.com' defaults : DOING_CREATE_ISSUE_TYPE : 'Task' DOING_WORKON_TYPE : 'Task' DOING_ISSUE_CREATE_STORY_POINTS : 5 DOING_WORKON_STORY_POINTS : 5 Overriding the existing config using environment variables: Bash export DOING_ISSUE_CREATE_ASSIGNED_TO = 'jane@company.com' doing issue create 'fixing a small typo' # > Created issue #146545 'fixing a small typo' (User Story) # > added area-path '{your area path}' # > added iteration-path '{your iteration path}' # > added assignee 'jane@company.com' .doing-cli-config.yml # ... other (required) config items... default_reviewers : 'john.doe@domain.com' Using user_aliases set in the config file : Shell doing issue create 'fixing a small typo' -a john # > Created issue #146545 'fixing a small typo' (User Story) # > added area-path '{your area path}' # > added iteration-path '{your iteration path}' # > added assignee 'john.doe@domain.com' .doing-cli-config.yml # ... other (required) config items... user_aliases : john : John.Doe@company.com jane : Jane.Doe@email.net","title":"In use"},{"location":"reference/manual/issue_list/","text":"doing issue list List issues related to the project. This is an alias \" doing issue list is an alias for doing list","title":"list"},{"location":"reference/manual/issue_list/#doing-issue-list","text":"List issues related to the project. This is an alias \" doing issue list is an alias for doing list","title":"doing issue list"},{"location":"reference/manual/list/","text":"doing list List issues related to the project. doing list [ flags ] Example usage doing list doing list -assignee \"John.Doe@company.com\" doing list -a \"John.Doe@company.com\" doing list -a @me doing list -author \"John.Doe@company.com\" doing list --label \"some_tag\" doing list --label \"some_tag, another tag\" doing list --state all doing list -a \"John.Doe@company.com\" -s all doing list --web doing list --type \"User Story\" Issue state open or closed? To determine if an issue is open or closed, doing maps the different workflow states . Options Usage: doing list [OPTIONS] List issues related to the project. Options: -a, --assignee TEXT Filter by assignee (email address) [env var: DOING_LIST_ASSIGNEE] -A, --author TEXT Filter by author (email address) [env var: DOING_LIST_AUTHOR] -l, --label TEXT Filter by labels (tag). Comma separate multiple tags. [env var: DOING_LIST_LABEL] -s, --state TEXT Filter by state. State should be: one of the doing-cli default states: 'open', 'closed', 'all'; a custom state defined under 'custom_states' in the .doing-cli.config.yml file; or a state available in this team, between quotes, e.g. \"'Active'\". Defaults to 'open'. [env var: DOING_LIST_STATE] -t, --type TEXT Type of work item. E.g.: 'Bug', 'User Story', 'Task' [env var: DOING_LIST_TYPE] -w, --web / --no-web Open overview of issues in the web browser. [env var: DOING_LIST_WEB] --story_points TEXT Filter on number of story points. Use 'unassigned' to find empty. You can use the following inequality symbols as prefixes: '>', '>=', '<' and '<='. [env var: DOING_LIST_STORY_POINTS] -o, --output_format TEXT Output format. 'table' has a rich display, 'array' will return a string list with ID's. [env var: DOING_LIST_OUTPUT_FORMAT] --show_state / --no-show_state Show column with work item state. [env var: DOING_LIST_SHOW_STATE] --help Show this message and exit.","title":"list"},{"location":"reference/manual/list/#doing-list","text":"List issues related to the project. doing list [ flags ]","title":"doing list"},{"location":"reference/manual/list/#example-usage","text":"doing list doing list -assignee \"John.Doe@company.com\" doing list -a \"John.Doe@company.com\" doing list -a @me doing list -author \"John.Doe@company.com\" doing list --label \"some_tag\" doing list --label \"some_tag, another tag\" doing list --state all doing list -a \"John.Doe@company.com\" -s all doing list --web doing list --type \"User Story\" Issue state open or closed? To determine if an issue is open or closed, doing maps the different workflow states .","title":"Example usage"},{"location":"reference/manual/list/#options","text":"Usage: doing list [OPTIONS] List issues related to the project. Options: -a, --assignee TEXT Filter by assignee (email address) [env var: DOING_LIST_ASSIGNEE] -A, --author TEXT Filter by author (email address) [env var: DOING_LIST_AUTHOR] -l, --label TEXT Filter by labels (tag). Comma separate multiple tags. [env var: DOING_LIST_LABEL] -s, --state TEXT Filter by state. State should be: one of the doing-cli default states: 'open', 'closed', 'all'; a custom state defined under 'custom_states' in the .doing-cli.config.yml file; or a state available in this team, between quotes, e.g. \"'Active'\". Defaults to 'open'. [env var: DOING_LIST_STATE] -t, --type TEXT Type of work item. E.g.: 'Bug', 'User Story', 'Task' [env var: DOING_LIST_TYPE] -w, --web / --no-web Open overview of issues in the web browser. [env var: DOING_LIST_WEB] --story_points TEXT Filter on number of story points. Use 'unassigned' to find empty. You can use the following inequality symbols as prefixes: '>', '>=', '<' and '<='. [env var: DOING_LIST_STORY_POINTS] -o, --output_format TEXT Output format. 'table' has a rich display, 'array' will return a string list with ID's. [env var: DOING_LIST_OUTPUT_FORMAT] --show_state / --no-show_state Show column with work item state. [env var: DOING_LIST_SHOW_STATE] --help Show this message and exit.","title":"Options"},{"location":"reference/manual/open/","text":"doing open Quickly open certain links. doing open [ flags ] Example usage Most doing open commands do not take arguments: doing open board doing open issues doing open pipe doing open prs doing open repo doing open sprint doing open policies doing open branches Some do: doing open issue 12345 doing open branch master doing open pr 54321 And for some it is optional (attempts to auto-detect argument): doing open issue doing open pr Options Usage: doing open [OPTIONS] COMMAND [ARGS]... Quickly open certain links. Options: --help Show this message and exit. Commands: board Open board view. branch Open a specific BRANCH_NAME. branches Open an overview of the repositories' branches. issue Open a specific WORK_ITEM_ID. issues Open all active issues view. pipe Open latest pipeline runs for repository view. policies Open repository policy settings. pr Open a specific PULLREQUEST_ID. prs Open active PRs for repository view. repo Open repository view. sprint Open current sprint view.","title":"open"},{"location":"reference/manual/open/#doing-open","text":"Quickly open certain links. doing open [ flags ]","title":"doing open"},{"location":"reference/manual/open/#example-usage","text":"Most doing open commands do not take arguments: doing open board doing open issues doing open pipe doing open prs doing open repo doing open sprint doing open policies doing open branches Some do: doing open issue 12345 doing open branch master doing open pr 54321 And for some it is optional (attempts to auto-detect argument): doing open issue doing open pr","title":"Example usage"},{"location":"reference/manual/open/#options","text":"Usage: doing open [OPTIONS] COMMAND [ARGS]... Quickly open certain links. Options: --help Show this message and exit. Commands: board Open board view. branch Open a specific BRANCH_NAME. branches Open an overview of the repositories' branches. issue Open a specific WORK_ITEM_ID. issues Open all active issues view. pipe Open latest pipeline runs for repository view. policies Open repository policy settings. pr Open a specific PULLREQUEST_ID. prs Open active PRs for repository view. repo Open repository view. sprint Open current sprint view.","title":"Options"},{"location":"reference/manual/pr_checkout/","text":"doing pr checkout Check out a pull request in git. PR_ID is the ID number of a pull request. '!' prefix is allowed. This command is a shorthand for az repos pr checkout --id doing pr checkout [ flags ] Example usage doing pr checkout 12345 Options Usage: doing pr close [OPTIONS] PR_ID... Close a specific PR_ID. PR_ID is the ID number of a pull request. '!' prefix is allowed. You can specify multiple IDs by separating with a space. Options: --help Show this message and exit.","title":"checkout"},{"location":"reference/manual/pr_checkout/#doing-pr-checkout","text":"Check out a pull request in git. PR_ID is the ID number of a pull request. '!' prefix is allowed. This command is a shorthand for az repos pr checkout --id doing pr checkout [ flags ]","title":"doing pr checkout"},{"location":"reference/manual/pr_checkout/#example-usage","text":"doing pr checkout 12345","title":"Example usage"},{"location":"reference/manual/pr_checkout/#options","text":"Usage: doing pr close [OPTIONS] PR_ID... Close a specific PR_ID. PR_ID is the ID number of a pull request. '!' prefix is allowed. You can specify multiple IDs by separating with a space. Options: --help Show this message and exit.","title":"Options"},{"location":"reference/manual/pr_close/","text":"doing pr close Close a specific PR_ID. doing pr close [ flags ] Example usage doing pr close 12345 doing pr close 12345 6789 34141 1231 Options Usage: doing pr close [OPTIONS] PR_ID... Close a specific PR_ID. PR_ID is the ID number of a pull request. '!' prefix is allowed. You can specify multiple IDs by separating with a space. Options: --help Show this message and exit.","title":"close"},{"location":"reference/manual/pr_close/#doing-pr-close","text":"Close a specific PR_ID. doing pr close [ flags ]","title":"doing pr close"},{"location":"reference/manual/pr_close/#example-usage","text":"doing pr close 12345 doing pr close 12345 6789 34141 1231","title":"Example usage"},{"location":"reference/manual/pr_close/#options","text":"Usage: doing pr close [OPTIONS] PR_ID... Close a specific PR_ID. PR_ID is the ID number of a pull request. '!' prefix is allowed. You can specify multiple IDs by separating with a space. Options: --help Show this message and exit.","title":"Options"},{"location":"reference/manual/pr_create/","text":"doing pr create Create a pull request. doing pr create [ flags ] Example usage doing pr create 1234 doing pr create 1234 --draft -r \"john.doe@company.com\" doing pr create 1234 --draft -r \"john.doe@company.com jane.doe@company.com\" doing pr create 1234 --draft -r \"@me jane.doe@company.com\" doing pr create 1234 --draft --checkout doing pr create 1234 --delete-source-branch --self-approve --auto-complete doing pr create 1234 --default-branch develop doing will create a branch name using the format {work_item_id} _ {issue_title} , where the {issue_title} is in lowercase, snake_case with all special characters removed. Example: issue #13 'Fix @ bug !' becomes 13_fix bug . If that branch already exists on the remote, doing will use that one. If a new branch is created while doing pr create , it will be branched from the default branch in Azure Devops, which usually will be master , but might be a different branch. This can be The pull request will target this same branch. Where to branch from can be overridden by using the option -default-branch . Options Usage: doing pr create [OPTIONS] WORK_ITEM_ID Create a pull request from a work item ID. WORK_ITEM_ID is the work item ID that will be linked to the PR. Options: --draft / --no-draft Create draft/WIP pull request. Reviewers will not be notified until you publish. Default is --draft. [env var: DOING_PR_CREATE_DRAFT] --auto-complete / --no-auto-complete Set the PR to complete autom. when all policies have passed. Default is --auto- complete. [env var: DOING_PR_CREATE_AUTO_COMPLETE] --self-approve / --no-self-approve Add yourself as reviewer and add your approval. Default is --no-self-approve. [env var: DOING_PR_CREATE_SELF_APPROVE] -r, --reviewers TEXT Space separated list of reviewer emails or aliases. Defaults to \"\" [env var: DOING_PR_CREATE_REVIEWERS] --checkout / --no-checkout Run git commands to checkout remote branch locally. Default is --checkout. [env var: DOING_PR_CREATE_CHECKOUT] --delete-source-branch / --no-delete-source-branch Set to delete source branch when pull request completes. Default is --delete- source-branch. [env var: DOING_PR_CREATE_DELETE_SOURCE_BRANCH] -w, --web / --no-web Open newly created issue in the web browser. [env var: DOING_PR_CREATE_WEB] -b, --default-branch TEXT The name of the branch to branch from and to. It overrides the repository's default branch. [env var: DOING_PR_CREATE_DEFAULT_BRANCH] --help Show this message and exit. In use Using user_aliases set in the config file : Shell doing pr create 1234 --reviewers 'john jane' # > Created pull request #49281 'fixing a small typo' # > linked work item #1234 # ... # > added reviewers: 'John.Doe@company.com Jane.Doe@email.net' .doing-cli-config.yml # ... other (required) config items... user_aliases : john : John.Doe@company.com jane : Jane.Doe@email.net Using default_reviewers set in the config file : Shell doing pr create 1234 # > Created pull request #49281 'fixing a small typo' # > linked work item #1234 # ... # > added reviewers: 'John.Doe@company.com Jane.Doe@email.net' .doing-cli-config.yml # ... other (required) config items... default_reviewers : \"john jane\" user_aliases : john : John.Doe@company.com jane : Jane.Doe@email.net","title":"create"},{"location":"reference/manual/pr_create/#doing-pr-create","text":"Create a pull request. doing pr create [ flags ]","title":"doing pr create"},{"location":"reference/manual/pr_create/#example-usage","text":"doing pr create 1234 doing pr create 1234 --draft -r \"john.doe@company.com\" doing pr create 1234 --draft -r \"john.doe@company.com jane.doe@company.com\" doing pr create 1234 --draft -r \"@me jane.doe@company.com\" doing pr create 1234 --draft --checkout doing pr create 1234 --delete-source-branch --self-approve --auto-complete doing pr create 1234 --default-branch develop doing will create a branch name using the format {work_item_id} _ {issue_title} , where the {issue_title} is in lowercase, snake_case with all special characters removed. Example: issue #13 'Fix @ bug !' becomes 13_fix bug . If that branch already exists on the remote, doing will use that one. If a new branch is created while doing pr create , it will be branched from the default branch in Azure Devops, which usually will be master , but might be a different branch. This can be The pull request will target this same branch. Where to branch from can be overridden by using the option -default-branch .","title":"Example usage"},{"location":"reference/manual/pr_create/#options","text":"Usage: doing pr create [OPTIONS] WORK_ITEM_ID Create a pull request from a work item ID. WORK_ITEM_ID is the work item ID that will be linked to the PR. Options: --draft / --no-draft Create draft/WIP pull request. Reviewers will not be notified until you publish. Default is --draft. [env var: DOING_PR_CREATE_DRAFT] --auto-complete / --no-auto-complete Set the PR to complete autom. when all policies have passed. Default is --auto- complete. [env var: DOING_PR_CREATE_AUTO_COMPLETE] --self-approve / --no-self-approve Add yourself as reviewer and add your approval. Default is --no-self-approve. [env var: DOING_PR_CREATE_SELF_APPROVE] -r, --reviewers TEXT Space separated list of reviewer emails or aliases. Defaults to \"\" [env var: DOING_PR_CREATE_REVIEWERS] --checkout / --no-checkout Run git commands to checkout remote branch locally. Default is --checkout. [env var: DOING_PR_CREATE_CHECKOUT] --delete-source-branch / --no-delete-source-branch Set to delete source branch when pull request completes. Default is --delete- source-branch. [env var: DOING_PR_CREATE_DELETE_SOURCE_BRANCH] -w, --web / --no-web Open newly created issue in the web browser. [env var: DOING_PR_CREATE_WEB] -b, --default-branch TEXT The name of the branch to branch from and to. It overrides the repository's default branch. [env var: DOING_PR_CREATE_DEFAULT_BRANCH] --help Show this message and exit.","title":"Options"},{"location":"reference/manual/pr_create/#in-use","text":"Using user_aliases set in the config file : Shell doing pr create 1234 --reviewers 'john jane' # > Created pull request #49281 'fixing a small typo' # > linked work item #1234 # ... # > added reviewers: 'John.Doe@company.com Jane.Doe@email.net' .doing-cli-config.yml # ... other (required) config items... user_aliases : john : John.Doe@company.com jane : Jane.Doe@email.net Using default_reviewers set in the config file : Shell doing pr create 1234 # > Created pull request #49281 'fixing a small typo' # > linked work item #1234 # ... # > added reviewers: 'John.Doe@company.com Jane.Doe@email.net' .doing-cli-config.yml # ... other (required) config items... default_reviewers : \"john jane\" user_aliases : john : John.Doe@company.com jane : Jane.Doe@email.net","title":"In use"},{"location":"reference/manual/pr_list/","text":"doing pr list List pull requests related to the project. doing pr list [ flags ] Example usage doing pr list doing pr list -assignee \"John.Doe@company.com\" doing pr list -a \"John.Doe@company.com\" doing list -a @me doing list --label \"some_tag\" doing list --label \"some_tag, another tag\" doing list --state all doing list --state merged doing list -a @me -s all -l a_tag doing list --web -s merged PR Statuses For consistency with GitHub CLI's gh pr list , we use {open|closed|merged|all} for PR status and internally translate to devops's {active|abandoned|completed|all} . This is useful for developers working cross-platform. Options Usage: doing pr list [OPTIONS] List pull requests related to the project. Options: -a, --assignee TEXT Filter by assigned reviewers (email address). [env var: DOING_PR_LIST_ASSIGNEE] -l, --label TEXT Filter by labels (tag). Comma separate multiple tags. [env var: DOING_PR_LIST_LABEL] -L, --limit INTEGER Maximum number of items to fetch (default 30) [env var: DOING_PR_LIST_LIMIT] -s, --state [open|closed|merged|all] Filter by state. Defaults to 'open' [env var: DOING_PR_LIST_STATE] -w, --web / --no-web Open overview of issues in the web browser. [env var: DOING_PR_LIST_WEB] --help Show this message and exit.","title":"list"},{"location":"reference/manual/pr_list/#doing-pr-list","text":"List pull requests related to the project. doing pr list [ flags ]","title":"doing pr list"},{"location":"reference/manual/pr_list/#example-usage","text":"doing pr list doing pr list -assignee \"John.Doe@company.com\" doing pr list -a \"John.Doe@company.com\" doing list -a @me doing list --label \"some_tag\" doing list --label \"some_tag, another tag\" doing list --state all doing list --state merged doing list -a @me -s all -l a_tag doing list --web -s merged PR Statuses For consistency with GitHub CLI's gh pr list , we use {open|closed|merged|all} for PR status and internally translate to devops's {active|abandoned|completed|all} . This is useful for developers working cross-platform.","title":"Example usage"},{"location":"reference/manual/pr_list/#options","text":"Usage: doing pr list [OPTIONS] List pull requests related to the project. Options: -a, --assignee TEXT Filter by assigned reviewers (email address). [env var: DOING_PR_LIST_ASSIGNEE] -l, --label TEXT Filter by labels (tag). Comma separate multiple tags. [env var: DOING_PR_LIST_LABEL] -L, --limit INTEGER Maximum number of items to fetch (default 30) [env var: DOING_PR_LIST_LIMIT] -s, --state [open|closed|merged|all] Filter by state. Defaults to 'open' [env var: DOING_PR_LIST_STATE] -w, --web / --no-web Open overview of issues in the web browser. [env var: DOING_PR_LIST_WEB] --help Show this message and exit.","title":"Options"},{"location":"reference/manual/workon/","text":"doing workon Create issue with PR and switch git branch. doing workon [ flags ] Example usage doing workon \"an issue\" doing workon \"an issue\" --type Bug doing workon \"an issue\" --type 'User Story' doing workon \"an issue\" --parent 12345 doing workon \"an issue\" --reviewers \"john.doe@company.com jane.doe@company.com\" doing workon \"an issue\" --no-auto-complete --no-draft --self-approve doing workon \"an issue\" --story-points 3 doing workon \"an issue\" --default-branch develop Options Usage: doing workon [OPTIONS] ISSUE Create issue with PR and switch git branch. Create self-assigned issue, draft pull request and switch git branch all in one go. ISSUE is the title to be used for the new work item. Options: --type [Bug|Epic|Feature|Issue|Task|Test Case|User Story] Type of work item. Defaults to \"User Story\" [env var: DOING_WORKON_TYPE] -p, --parent TEXT To create a child work item, specify the ID of the parent work item. [env var: DOING_WORKON_PARENT] -r, --reviewers TEXT Space separated list of reviewer emails. Defaults to \"\" [env var: DOING_WORKON_REVIEWERS] --draft / --no-draft Create draft/WIP pull request. Reviewers will not be notified until you publish. Default is --draft. [env var: DOING_WORKON_DRAFT] --auto-complete / --no-auto-complete Set the PR to complete autom. when all policies have passed. Default is --auto- complete. [env var: DOING_WORKON_AUTO_COMPLETE] --self-approve / --no-self-approve Add yourself as reviewer and add your approval. Default is --no-self-approve. [env var: DOING_WORKON_SELF_APPROVE] --checkout / --no-checkout Run git commands to checkout remote branch locally. Default is --checkout. [env var: DOING_WORKON_CHECKOUT] --delete-source-branch / --no-delete-source-branch Set to delete source branch when pull request completes. Default is --delete- source-branch. [env var: DOING_WORKON_DELETE_SOURCE_BRANCH] -s, --story-points TEXT The number of story points to assign. Not assigned if not specified. [env var: DOING_WORKON_STORY_POINTS] -b, --default-branch TEXT The name of the branch to branch from and to. It overrides the repository's default branch. [env var: DOING_WORKON_DEFAULT_BRANCH] --help Show this message and exit.","title":"workon"},{"location":"reference/manual/workon/#doing-workon","text":"Create issue with PR and switch git branch. doing workon [ flags ]","title":"doing workon"},{"location":"reference/manual/workon/#example-usage","text":"doing workon \"an issue\" doing workon \"an issue\" --type Bug doing workon \"an issue\" --type 'User Story' doing workon \"an issue\" --parent 12345 doing workon \"an issue\" --reviewers \"john.doe@company.com jane.doe@company.com\" doing workon \"an issue\" --no-auto-complete --no-draft --self-approve doing workon \"an issue\" --story-points 3 doing workon \"an issue\" --default-branch develop","title":"Example usage"},{"location":"reference/manual/workon/#options","text":"Usage: doing workon [OPTIONS] ISSUE Create issue with PR and switch git branch. Create self-assigned issue, draft pull request and switch git branch all in one go. ISSUE is the title to be used for the new work item. Options: --type [Bug|Epic|Feature|Issue|Task|Test Case|User Story] Type of work item. Defaults to \"User Story\" [env var: DOING_WORKON_TYPE] -p, --parent TEXT To create a child work item, specify the ID of the parent work item. [env var: DOING_WORKON_PARENT] -r, --reviewers TEXT Space separated list of reviewer emails. Defaults to \"\" [env var: DOING_WORKON_REVIEWERS] --draft / --no-draft Create draft/WIP pull request. Reviewers will not be notified until you publish. Default is --draft. [env var: DOING_WORKON_DRAFT] --auto-complete / --no-auto-complete Set the PR to complete autom. when all policies have passed. Default is --auto- complete. [env var: DOING_WORKON_AUTO_COMPLETE] --self-approve / --no-self-approve Add yourself as reviewer and add your approval. Default is --no-self-approve. [env var: DOING_WORKON_SELF_APPROVE] --checkout / --no-checkout Run git commands to checkout remote branch locally. Default is --checkout. [env var: DOING_WORKON_CHECKOUT] --delete-source-branch / --no-delete-source-branch Set to delete source branch when pull request completes. Default is --delete- source-branch. [env var: DOING_WORKON_DELETE_SOURCE_BRANCH] -s, --story-points TEXT The number of story points to assign. Not assigned if not specified. [env var: DOING_WORKON_STORY_POINTS] -b, --default-branch TEXT The name of the branch to branch from and to. It overrides the repository's default branch. [env var: DOING_WORKON_DEFAULT_BRANCH] --help Show this message and exit.","title":"Options"}]}